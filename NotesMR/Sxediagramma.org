#+title: The Quest for Pure Data and SuperCollider

#+author: E. Rovithis, I. Zannos

* log

** IZ 19 Aug 2021 23:22
/At this phase (19 Aug 2021 23:20) and until further notice, please use this folder to add new texts, notes, materials./

Do this in your own branch (manos), and submit this by pushing the branch and creating pull requests.

** ER 26 Aug 2021 20:50

  η μέχρι στιγμής οργάνωση των Κεφάλαιων είναι βασισμένη:
  1) στο κείμενο που συντάξαμε κατά την πρόταση
  2) στο Pure Data tutorial που συνέταξα για τις ανάγκες του μαθήματος "Αλγοριθμική Σύνθεση και Δόμηση του Ήχου"
  3) στην οργάνωση που έχει κάνει ο Andy Farnell στο βιβλίο του "Designing Sound"

  με άλλα λόγια, έχω λάβει υπόψιν μόνο το συγκεντρωμένο υλικό για Pure Data
  και δεν έχω κοιτάξει τη δόμηση των Κεφάλαιων που κάνετε εσείς στο υλικό σας για SuperCollider. !!!!!
  Έκανα κάποιες αλλαγές ως προς τα Κεφάλαια που είχαμε καταθέσει στην πρόταση
  για ό,τι άλλο αλλάξουμε θα τροποποιήσω τη PureData ύλη αναλόγως.

  με italics στην αρχή κάθε Κεφάλαιου είναι η Σύντομη Περιγραφή που στείλαμε με την Πρόταση,
  δεν μας δεσμεύει -φαντάζομαι- την έβαλα ως οδηγό μας.

  για την ιστορία, ο Farnell δομεί -το απλοποιώ αρκετά- τα κεφάλαια του ως εξής:
  1.Getting Started: παρουσίαση του προγράμματος, εγκατάσταση, βασικές λειτουργίες, θεμελιώδη στοιχεία της γλώσσας
  2.Basic Objects: συναρμολόγηση απλών εργαλείων για διαχείριση αριθμητικών δεδομένων
  3.Audio Objects: παρουσίαση εργαλείων διαχείρισης ηχητικού σήματος, ανάπτυξη τεχνικών
  4.Abstractions: τρόποι ανάπτυξης externals, βασικά στοιχεία GUI
  5.Shaping Techniques: envelopes, filters
  6.Essential Tools: εργαλεία που αφορούν την τοποθέτηση ήχω σε χώρο και χρόνο, κονσόλα μίξης
  7.Sound Design Techniques: Additive, Subtractive, Wavetable, Waveshaping, AM, FM, Granular, Time & Pitch Shift
  8.Sound Design Examples: άφθονα και στοχευμένα παραδείγματα σχεδιασμού ηχητικών γεγονότων και διαδικασιών (πουλιά, πόρτες, βήματα, κτλ)/

** ER 26 Sep 2021

πρώτο Κεφάλαιο (text & figures)
δόμηση των κεφαλαίων σε:
1. "Προοίμιο"
2. Άσκηση
   2a. Pure Data
   2b. SuperCollider

** ER 27 Oct ..ongoing

oριστικοποίηση της σειράς και του περιεχομένου των Κεφαλαίων (βλ. Overview)

Κεφάλαια 2 & 3 (text & figures)




* Overview

1. Εισαγωγή στα Περιβάλλοντα Μουσικού Προγραμματισμού
   /Παρουσίαση Περιβάλλοντος, Hello World/
2. Πρώτα Βήματα
   /Βασικά Εργαλεία, Μετρητής/
3. Data Flow >> code  (Chapter x?)
   /Nesting, Code/
4. Αρχές Σύνθεσης Ήχου
   /Sine, Saw, Square Generator/
5. Μουσική Δόμηση του Ήχου
   /Midi Notes, Arpeggiator/
6. Το Ηχητικό Δείγμα
   /Sample & Envelopes, Chopper/
7. Ντετερμινισμός και Τυχαιοκρατία στη Μουσική Εκτέλεση
   /Algorithmic & Probabilistic Synthesis, Randomizer/
8. Additive & Subtractive Synthesis
   /Noise, Filters, Synthesis Modules/
9. Amplitude & Frequency Modulation
   /AM & FM Synthesis Modules/

*------deadline November------*


10. Wavetable Synthesis
   /Wavetable Synthesis Modules/
11. Granular Synthesis *?FFT Transform?*
    /Granular Synthesis Modules/
12. Delay & Feedback Modules
    /Delay, Reverb, Chorus/
13. Interface Design
    /Nesting, sub-patches/
14. Connectivity
    /OSC, Arduino, Sensors/
15. Computer Assisted Improvisation
    /looper / search for patterns/


Λεξιλόγιο:
Παράμετροι VS Ορίσματα


* Τίτλος - ΕΙΣΑΓΩΓΗ ΣΤΟΝ ΜΟΥΣΙΚΟ ΠΡΟΓΡΑΜΜΑΤΙΣΜΟ

** Υπότιτλος
Μουσική σύνθεση και ηχητική επεξεργασία στα ελεύθερα λογισμικά Pure Data και SuperCollider



* Κεφάλαιο 1 - Εισαγωγή στα Περιβάλλοντα Μουσικού Προγραμματισμού

** Προοίμιο

/ιστορική αναδρομή στη δημιουργία και εξέλιξη των γλωσσών μουσικού προγραμματισμού με έμφαση σε Pd και SC/
/κοινωνικοί, πολιτικοί, και τεχνολογικοί παράγοντες που έπαιξαν καθοριστικό ρόλο στην ανάπτυξη και διάδοση των εν λόγω εργαλείων/
/πρώτες απόπειρες μουσικής σύνθεσης μέσω υπολογιστή μέχρι τον σύγχρονο εκδημοκρατισμό των τεχνολογικών μέσων για ηχητική σύνθεση και επεξεργασία/
/Άσκηση: "Hello Music"/

/Θέματα Pd: ??comment??, εγκατάσταση, παρουσίαση περιβάλλοντος, objects, messages, κοινότητα, βοήθεια/

** Κύριο Μέρος

*** Pure Data
Τρέχοντας το πρόγραμμα μετά την εγκατάσταση, το μοναδικό παράθυρο που βλέπουμε είναι η κονσόλα (terminal). *Figure "Terminal"* Η κονσόλα χρησιμεύει για τη γνωστοποίηση στον χρήστη τυχόν σφαλμάτων και την παρακολούθηση στοχευμένων δεδομένων του κώδικα. Στην κονσόλα βρίσκεται επίσης το πεδίο ενεργοποίησης του ήχου. *Figure "InOut"* Για να συντελεστεί όμως η παραγωγή οποιουδήποτε ηχητικού αποτελέσματος, θα πρέπει το Pure Date να είναι συνδεδεμένο με την κάρτα ήχου του υπολογιστή.

Επιλέγοντας π.χ. αριστερά τα πεδία /80/ και /tone/ θα πρέπει να ακούμε έναν τόνο 80Hz.

Σύμφωνα με τη συνήθη πρακτική των σύγχρονων προγραμμάτων, το Pure Data διαθέτει γραμμή μενού εντολών (menu bar) στην κορυφή της οθόνης. *Figure "MenuBar"* Από εκεί μπορεί ο χρήστης να καλέσει τις βασικότερες εντολές του προγράμματος, αλλά και να δει για την κάθε μια την αντίστοιχη συντόμευση. Στο παρόν σύγγραμμα προτείνεται ο τρόπος των συντομεύσεων, οι οποίες θα αναγράφονται σε παρενθέσεις. Εντούτοις, ο αναγνώστης μπορεί να ακολουθήσει όποιον τρόπο κρίνει πιο βολικό. Να σημειωθεί, επίσης, πως τα παραδείγματα υλοποίησης έχουν πραγματοποιηθεί σε περιβάλλον macOS. Σε περιβάλλον Windows η αντιστοιχία του βασικού κουμπιού συντομεύσεων command (cmd) είναι το control (ctrl).
=======
Τρέχοντας το πρόγραμμα μετά την εγκατάσταση, το μοναδικό παράθυρο που βλέπουμε είναι η κονσόλα (terminal). *Figure "Terminal"*
Η κονσόλα χρησιμεύει για τη γνωστοποίηση στον χρήστη τυχόν σφαλμάτων και την παρακολούθηση στοχευμένων δεδομένων του κώδικα.

Στην κονσόλα βρίσκεται επίσης το πεδίο ενεργοποίησης του ήχου. *Figure "InOut"*
Για να συντελεστεί όμως η παραγωγή οποιουδήποτε ηχητικού αποτελέσματος, θα πρέπει το Pure Date να είναι συνδεδεμένο με την κάρτα ήχου του υπολογιστή.
Η επιλογή των κατάλληλων συσκευών Εισόδου/Εξόδου γίνεται ως εξής: /Γραμμή Εργαλειών >> Media >> Audio Settings >> Input/Output Devices/. *Figure "Settings"*
Δοκιμή πως όλα είναι σωστά συνδεδεμένα μπορούμε να κάνουμε μέσω: /Γραμμή Εργαλειών >> Media >> Test Audio and Midi/. *Figure "TestAudio"*
Επιλέγοντας π.χ. αριστερά τα πεδία /80/ και /tone/ θα πρέπει να ακούμε έναν τόνο 80Hz.
>>>>>>> main

Για να αρχίσουμε να προγραμματίζουμε χρειάζεται να δημιουργήσουμε ένα νέο αρχείο (patch) (cmd-N). Εμφανίζεται σε παράθυρο ένα κενό έγγραφο, το οποίο θα αναφέρεται εφ'εξής ως "πρόγραμμα". *Figure "NewPatch"* Το κενό ως σημείο αφετηρίας δεν πρέπει να μας φοβίζει, καθώς έτσι μπορούμε χωρίς κανένα περιορισμό να δημιουργήσουμε το πρόγραμμα που επιθυμούμε. Φανταστείτε πως έχουμε έναν λευκό καμβά, για να υποδεχτεί τα χρώματα της φαντασίας μας.

Τα προγράμματα στο Pure Data έχουν δύο (2) πιθανές καταστάσεις: Στην κατάσταση Επεξεργασίας (Edit mode) μπορούμε να εισάγουμε και να τροποποιούμε τον κώδικα μας. Στην κατάσταση Λειτουργίας (Run mode) μπορούμε να εκτελούμε τον κώδικα και να τον τροφοδοτούμε με δεδομένα σε πραγματικό χρόνο. Η μετάβαση ανάμεσα στις δύο καταστάσεις γίνεται με (cmd-Ε). Φέρνουμε το κενό -μέχρι στιγμής- πρόγραμμα μας σε κατάσταση επεξεργασίας και παρατηρούμε την ένδειξη *edit* στην κορυφή. *Figure "EditMode"* Είμαστε έτοιμοι να προγραμματίσουμε!

Για την πρώτη μας άσκηση θα παραφράσουμε την -κλασική πια στην εκμάθηση γλωσσών προγραμματισμού- άσκηση εμφάνισης του μηνύματος "Hello World". Αντ'αυτού επιλέγουμε να εμφανίσουμε "Hello Music" και μάλιστα η εντολή αυτή να εκτελείται αυτόματα με το άνοιγμα του προγράμματος. Το πρόγραμμα αυτό, μέχρι το τέλος αυτού του συγγράμματος, θα φιλοξενεί ένα όργανο ηχητικής δημιουργίας.

Για την υλοποίηση της Άσκησης θα χρειαστούμε τα εξής 3 αντικείμενα: message, print, loadbang

Εισάγουμε στο πρόγραμμα μας ένα αντικείμενο message (cmd-2).
Παρατηρούμε πως το αντικείμενο κολλάει στον κέρσορα μας και χρειάζεται να κλικάρουμε σε όποιο σημείο του καμβά θέλουμε να το αποθέσουμε.
Παρατηρούμε επίσης πως σε δύο σημεία, ένα πάνω και ένα κάτω, το περίγραμμα του αντικειμένου είναι πιο έντονο.
Το πάνω σημείο αποτελεί την είσοδο του αντικειμένου, ενώ το κάτω την έξοδο του.
Συνεπώς, το αντικείμενο message έχει μία είσοδο και μία έξοδο, ώστε να επικοινωνεί με άλλα αντικείμενα.
Γράφουμε μέσα στο πλαίσιο του αντικειμένου τη φράση "Hello Music" και κλικάρουμε οπουδήποτε έξω από αυτό στον καμβά.

Το μήνυμα αυτό χρειάζεται ένα αντικείμενο, το οποίο θα φροντίσει για την εμφάνιση του μηνύματος στην κονσόλα.
Εισάγουμε στο πρόγραμμα ένα αντικείμενο print (cmd-1 και έπειτα πληκτρολογούμε στο πεδίο του αντικειμένου "print")
To αντικείμενο print έχει μόνο μία είσοδο, με την οποία πρέπει να ενώσουμε την έξοδο του message.

Η διαδικασία σύνδεσης δύο αντικειμένων συντελείται ως εξής:
Κρατώντας τον κέρσορα πάνω από μια έξοδο, αυτός παίρνει τη μορφή κύκλου.
Κλικάρουμε (δεξί κλικ) και κρατώντας πατημένο το κουμπί του ποντικιού (ή την επιφάνεια του touchpad) σέρνουμε προς την επιθυμητή είσοδο.
Όταν εμφανιστεί πάλι κύκλος, αφήνουμε το κουμπί, για να ολοκληρωθεί η σύνδεση.

Τώρα που συνδέσαμε το message με το print κλειδώνουμε το πρόγραμμα και πατάμε το message. *Figure "FirstConnection"*
Θα δούμε να εμφανίζεται στην κονσόλα μας το επιθυμητό μήνυμα. *Figure "HelloMusic"*
Για να εμφανίζεται το μήνυμα κάθε φορά που ανοίγουμε το πρόγραμμα, χρειαζόμαστε ένα αντικείμενο που να μιμείται το χειροκίνητο πάτημα του message.
Ξεκλειδώνουμε το πρόγραμμα και εισάγουμε το αντικείμενο loadbang, όπως κάναμε πριν με το αντικείμενο print.
Ενώνουμε την έξοδο του loadbang με την είσοδο του message. *Figure "FirstSystem"*
Κλειδώνουμε το πρόγραμμα και το αποθηκεύουμε με την ενδεικτική ονομασία "MyPdSynth" (μενού εντολών >> save as).
Την επόμενη φορά που θα ανοίξουμε το πρόγραμμα, το μήνυμα θα εμφανιστεί αυτόματα στην κονσόλα.


*** SuperCollider



* Κεφάλαιο 2 - Πρώτα Βήματα

** Προοίμιο

/γενικά χαρακτηριστικά των δύο περιβαλλόντων με έμφαση στα δομικά στοιχεία και τους τρόπους που αυτά αλληλεπιδρούν/
/αρχιτεκτονική, αρχές λειτουργίας, λεξιλόγιο/
/Άσκηση: "Count Me In"/

/θέματα Pd: bang, toggle, arithmetic operators, number boxes, properties, float, metro/

** Κύριο Μέρος

*** Pure Data

Η γλώσσα του Pd μπορεί να διακριθεί σε εργαλεία που αφορούν τη διαχείριση αριθμητικών δεδομένων και εργαλεία που αφορούν τη διαχείριση σήματος.
Στο παρόν κεφάλαιο θα εστιάσουμε στην πρώτη κατηγορία.

Βασική θέση στο λεξιλόγιο της γλώσσας καταλαμβάνει το εργαλείο bang.(shift-cmd-B)
Ουσιαστικά αποτελεί ένα εικονικό κόμβιο, εν δυνάμει φορέα μιας ενέργειας.
Πατώντας το κόμβιο η ενέργεια αυτή μεταδίδεται από την έξοδο στα συνδεδεμένα αντικείμενα.
Επιπλέον της χειροκίνητης ενεργοποίησης, το κόμβιο ενεργοποιείται και άνωθεν από τα συνδεδεμένα αντικείμενα.
Συνεπώς, το bang έχει μια είσοδο και μια έξοδο. *Figure "Bang"*

Άλλο βασικό αντικείμενο είναι το number (cmd-3), το οποίο απεικονίζει και μεταδίδει αριθμητικά δεδομένα.
Μπορεί να ενεργοποιηθεί χειροκίνητα, πληκτρολογώντας μια τιμή στο πεδίο και πατώντας το enter,
ή κλικάροντας και σέρνοντας πατημένα προς πάνω ή κάτω για αύξηση και μείωση τιμών αντίστοιχα.
Χρήσιμο στη χειροκίνητη λειτουργία είναι να θέσουμε ελάχιστο και μέγιστο όριο στις αποτυπώμενες τιμές,
και με αυτή την αφορμή να δούμε πώς μπορούμε γενικά να επέμβουμε στις ιδιότητες των αντικειμένων.

Με δεξί κλικ στο number εμφανίζεται η επιλογή properties. *Figure "Properties"*
Εδώ μπορούμε να τροποποιήσουμε τις τιμές και καταστάσεις διάφορων εσωτερικών παραμέτρων.
Σε αυτή την περίπτωση ορίζουμε ελάχιστη και μέγιστη τιμή του number στην κατηγορία Limits και τα πεδία Lower και Upper.
Να σημειωθεί εδώ πως κάποια αντικείμενα δεν δίνουν την επιλογή τροποποίησης των ιδιοτήτων τους.

Το αντικείμενο number δέχεται τιμές και από άλλα αντικείμενα, το καθένα από τα οποία επενεργεί με συγκεκριμένο τρόπο.
Ας δούμε το πρόγραμμα στην Εικόνα *Figure "Number"*
Δύο messages και ένα bang είναι συνδεδεμένα σε ένα number, και αυτό με τη σειρά του συνδέεται σε ένα print.
Με το bang στέλνουμε την τρέχουσα τιμή του number στο print.
Πατάμε το message με τον αριθμό "7" και παρατηρούμε πως εμφανίζεται στο number και στην κονσόλα μας.
Αντίθετα, πατώντας τo message "set 9" παρατηρούμε πως ο αριθμός "9" εμφανίζεται μόνο στο number.
Αυτό συμβαίνει, επειδή το πρόθεμα "set" σε ένα message έχει την ιδιότητα να διαμοιράζει την πληροφορία μόνο στο επόμενο στάδιο,
χωρίς να την πυροδοτεί περαιτέρω, κι έτσι αυτή δεν φτάνει στο print.

Οι αριθμητικοί τελεστές είναι αντικείμενα, με τα οποία πραγματοποιούμε αριθμητικές πράξεις,
συγκεκριμένα πρόσθεση, αφαίρεση, πολλαπλασιασμό, διαίρεση, και ύψωση σε δύναμη. *Figure "Math"*
Παρατηρούμε πως τα αντικείμενα αυτά έχουν δύο εισόδους.
Κάθε είσοδος πλην της αριστερής ονομάζεται "κρύα" και έχει τη λειτουργία να αποθηκεύει την εισαγόμενη πληροφορία,
χωρίς όμως να πυροδοτεί την έξοδο του αντικειμένου.
Η αριστερή είσοδος ονομάζεται "ζεστή" και, δεχόμενη πληροφορία, εκτελεί την πράξη και πυροδοτεί την έξοδο.
Οι αριθμητικοί τελεστές έχουν αρχική τιμή μηδέν.
Κάθε τιμή που θα εισαχθεί στην κρύα είσοδο, θα αποθηκευτεί στη θέση της αρχικής, χωρίς να εξάγει αποτέλεσμα.
Η τιμή που εισαχθεί στη ζεστή είσοδο, θα πραγματοποιήσει την πράξη και θα εξάγει αποτέλεσμα.

Να σημειωθεί εδώ πως μπορούμε να ορίσουμε παραμέτρους των αντικειμένων με μια αρχική τιμή δίπλα στην ονομασία τους.
Στην εικόνα *Figure "MathAct"* βλέπουμε ένα αντικείμενο διαίρεσης με αρχική αναγραφόμενη τιμή "3".
Κάθε τιμή που εισάγεται στη ζεστή είσοδο θα διαιρεθεί με αυτή την αρχική τιμή, εκτός αν έχει αντικατασταθεί από άλλη στην κρύα είσοδο.

Για την Άσκηση του Κεφαλαίου θα υλοποιήσουμε έναν μετρητή ενεργειών (bangs).
Το συγκεκριμένο εργαλείο είναι σημαντικό για τον αλγοριθμικό συσχετισμό μουσικών γεγονότων, αυτοματοποιημένες διαδικασίες,
εισαγωγή δεδομένων από τον χρήστη, και άλλες χρήσεις.

Για την υλοποίηση της Άσκησης θα χρειαστούμε τα εξής 3 αντικείμενα: toggle, metro, και float.

Το αντικείμενο metro παράγει bangs με συγκεκριμένη περιοδικότητα, την οποία ορίζουμε στην κρύα είσοδο ως χιλιοστά του δευτερολέπτου (mlsecs).
Οποιαδήποτε μη-μηδενική τιμή στη ζεστή είσοδο ξεκινάει τη διαδικασία, ενώ η μηδενική τιμή τη σταματάει.
Ως διακόπτη του metro θα χρησιμοποιήσουμε το αντικείμενο toggle, το οποίο ενεργοποιημένο εξάγει την τιμή 1 και απενεργοποιημένο την τιμή 0.
Το αντικείμενο float αποθηκεύει μια ακέραια ή δεκαδική τιμή στην κρύα είσοδο, την οποία εξάγει, όταν ενεργοποιείται η ζεστή είσοδος.
Για τον μετρητή μας ουσιαστικά χρειάζεται να πυροδοτούμε την αποθηκευμένη τιμή του float, να προσθέτουμε σε αυτήν την τιμή 1,
και να αποθηκεύουμε τη νέα αυτή τιμή για την επόμενη πυροδότηση.

Συνδέουμε στο πρόγραμμα το αντικείμενο toggle στη ζεστή είσοδο ενός metro mε αρχική τιμή 1000(mlsecs).
Έπειτα, συνδέουμε την έξοδο του bang στη ζεστή είσοδο του float, διαμεσολαβώντας ένα bang, για να παρακολουθούμε τη διαδικασία.
Δίνουμε στο float αρχική τιμή 0 και συνδέουμε την έξοδο με τη ζεστή είσοδο αντικειμένου πρόσθεσης με αρχική τιμή 1.
Το αποτέλεσμα της πρόσθεσης αποτυπώνεται σε ένα αντικείμενο number, αλλά και αποθηκεύεται στην κρύα είσοδο του αριθμητικού τελεστή.
Με τον διακόπτη toggle μπορούμε να εκκινούμε και να παύουμε την καταμέτρηση από την τρέχουσα τιμή,
ενώ για επανεκκίνηση της διαδικασίας από την αρχή χρειάζεται να τροφοδοτήσουμε στο toggle και στην κρύα είσοδο του float την τιμή 0. *Figure "Counter"*



*** SuperCollider



* Κεφάλαιο 3 - Ροή Δεδομένων

** Προοίμιο

/βασικά στοιχεία και δόμηση μουσικών προγραμμάτων/
/Θέματα Pd: ροή δεδομένων, patch ως κώδικας, trigger, inlet, outlet, subpatch, set??/

** Κύριο Μέρος


* Κεφάλαιο 4 - Αρχές Σύνθεσης Ήχου

** Προοίμιο

/Εισάγονται οι αρχές επεξεργασίας ψηφιακού σήματος και του προγραμματισμού,/
/όπως σήμα, buffer, γεννήτρια, δίαυλος, μεταβλητή, συνάρτηση κ.α./
/ημιτονοειδής ταλάντωση και σύνθετες κυματομορφές (πριονωτή, τριγωνική, τετράγωνη)/
/Άσκηση: "Let There Be Sound"/

/θέματα Pd: osc~, phasor~, αριθμητικοί τελεστές σήματος, line~, pack, vslider, array, tabwrite~, dac~, expr~ /

** Κύριο Μέρος

*** Pure Data

Τα αντικείμενα για τη σύνθεση και διαχείριση σήματος είναι η δεύτερη κατηγορία αντικειμένων του Pure Data.
Διακρίνονται ως προς τα αντικείμενα διαχείρισης μηνυμάτων μέσω του συμβόλου "~" στο τέλος της ονομασίας τους,
ενώ τα καλώδια διασύνδεσης τους είναι πιο παχιά. *Figure "MsgAudioCompare"*
Θα δούμε πως πολλά αντικείμενα στο Pure Data υπάρχουν σε δύο μορφές:
χωρίς το σύμβολο "~"  για διαχείριση μηνυμάτων, και με το σύμβολο "~" για διαχείριση σήματος.
Μια ακόμη διαφορά είναι πως το σύστημα επεξεργάζεται το σήμα σε συγχρονισμό με τη συχνότητα δειγματοληψίας της κάρτας ήχου.
Πρακτικά αυτό σημαίνει πως η ροή της πληροφορίας σήματος είναι συνεχής και σε πραγματικό χρόνο, όσες συνδέσεις και να κάνουμε.

Οι ταλαντωτές είναι οι βασικές γεννήτριες σήματος στη σύνθεση ηλεκτρονικής μουσικής.
Το Pure Data αναγνωρίζει ένα ηχητικό σήμα ως μια σειρά τιμών στο εύρος ανάμεσα -1 και 1.
Τα κύρια αντικείμενα για την παραγωγή ταλαντώσεων είναι τα osc~ και phasor~,
υπεύθυνα για ημιτονοειδή και πριονωτή ταλάντωση αντίστοιχα.

Στο *Figure "Oscillator"* παρουσιάζεται ένα σύστημα με πηγή σήματος το αντικείμενο osc~,
το οποίο παράγει ημιτονοειδή ταλάντωση στη συχνότητα που έχει οριστεί ως αρχική τιμή.
Την αρχική τιμή συχνότητας του osc~ μπορούμε να τη μεταβάλλουμε με number box στη ζεστή είσοδο.
Για να μεταβάλλουμε την ένταση του osc~ θα χρησιμοποιήσουμε έναν πολλαπλασιαστή σήματος,
δηλαδή έναν αριθμητικό τελεστή πολλαπλασιασμού με το σύμβολο "~".
To osc~ συνδέεται στη ζεστή είσοδο του πολλαπλασιαστή σήματος και παράγει συνεχή ροή δεδομένων,
ενώ στην κρύα είσοδο συνδέουμε ένα αντικείμενο line~, το οποίο δέχεται ζεύγη τιμών:
η πρώτη τιμή του ζεύγους αποτελεί τον προορισμό και η δεύτερη τον χρόνο σε mlsecs που θα διαρκέσει η διαδρομή.
Ο στόχος είναι να δημιουργούμε ομαλές μεταβάσεις προς κάθε νέα τιμή έντασης από 0 έως 1 που εισάγουμε.

Τα ζεύγη τιμών στο line~ παρέχονται από το αντικείμενο pack, το οποίο συναρμολογεί λίστες στοιχείων με πλήθος ανάλογο των παραμέτρων του.
Στη συγκεκριμένη περίπτωση, το pack έχει οριστεί με δύο παραμέτρους και για αυτόν τον λόγο διαθέτει δύο εισόδους.
Στην πρώτη είσοδο έχουμε συνδέσει έναν κάθετο ολισθητή, δηλαδή ένα αντικείμενο vslider.
Αφού θέλουμε οι τιμές έντασης να κυμαίνονται ανάμεσα σε 0 και 1,
τις έχουμε θέσει ως ελάχιστο και μέγιστο όριο στις ιδιότητες του vslider αντικειμένου.
Η δεύτερη είσοδος του pack είναι κενή, συνεπώς με κάθε νέα τιμή από το vslider ως πρώτο στοιχείο της λίστας,
η δεύτερη τιμή θα είναι πάντα 50 και θα αποτελεί τον χρόνο μετάβασης σε mlsecs.

Την κυματομορφή του σήματος μπορούμε να παρακολουθήσουμε μέσω του αντικειμένου array.
Το αντικείμενο array αποτελεί ουσιαστικά έναν πίνακα αποθήκευσης τιμών.
Εισάγοντας το αντικείμενο στο πρόγραμμα ζητείται να ορίσουμε ένα όνομα και ένα μέγεθος.
Μέσω του ονόματος θα επικοινωνούν με το συγκεκριμένο array όλα τα υπόλοιπα αντικείμενα.
Ως μέγεθος ορίζουμε ενδεικτικά τα 1000 σημεία για τον άξονα x.
Ο άξονας y έχει εξ'ορισμού το εύρος -1 έως 1.
Συνδέοντας την έξοδο του πολλαπλασιαστή σήματος με την είσοδο του αντικειμένου tabwrite~
καταγράφουμε στο array, στο οποίο αναφέρεται το tabwrite~, τις τιμές του σήματος,
ενώ με το metro αποτυπώνουμε τις τιμές αυτές κάθε 50 mlsecs.

Τέλος, για να ακούσουμε το αποτέλεσμα χρειάζεται να έχουμε αφενός ενεργοποιήσει τον ήχο στην κονσόλα,
αφετέρου να οδηγήσουμε το σήμα στο αντικείμενο dac~ (μετατροπέας ψηφιακού σε αναλογικό).
Το dac~ στέλνει, ανάλογα με τις παραμέτρους του, το σήμα στα αντίστοιχα κανάλια της κάρτας ήχου.
Εξ'ορισμού έχει 2 παραμέτρους και στέλνει το σήμα στο αριστερό και δεξί κανάλι.
Να σημειωθεί εδώ πως το dac~, όπως νωρίτερα το pack, ανήκουν στα αντικείμενα που ανάλογα με τις παραμέτρους τους
εμφανίζουν και τις αντίστοιχες εισόδους.

Για να δημιουργήσουμε μια πριονωτή ταλάντωση, αντικαθιστούμε το αντικείμενο osc~ με το αντικείμενο phasor~. *Figure "Sawtooth"*
Φυσικά, αν θέλουμε να διατηρήσουμε και τις δύο γεννήτριες και να παρατηρούμε τις κυματομορφές που παράγουν,
χρειάζεται να μετονομάσουμε το array και το tabwrite~ της phasor~ γεννήτριας.

Τέλος, θα δείξουμε πώς δημιουργείται μια γεννήτρια τετράγωνης κυματομορφής, καθώς δεν υπάρχει αντίστοιχο αντικείμενο στο Pure Data.
H τετράγωνη κυματομορφή περιέχει μόνο τις μονές αρμονικές και οι τιμές της εναλλάσσονται ανάμεσα στις τιμές 0 και 1.
Τα αντικείμενα expr και expr~ ελέγχουν συνθήκες μηνυμάτων και σήματος αντίστοιχα, εξάγοντας 1 αν ευσταθούν, αλλιώς 0.
Ελέγχοντας αν οι τιμές σήματος του phasor~ είναι μεγαλύτερες από 0.5 μετατρέπουμε το σήμα σε ακολουθίες άσσων και μηδενικών. *Figure "Square"*


*** SuperCollider


* Κεφάλαιο 5 - Μουσική Δόμηση του Ήχου

** Προοίμιο
/Στο έβδομο κεφάλαιο αναλύεται η διαχείριση midi πληροφοριών, από τη μετατροπή του μεγέθους της συχνότητας σε midi τιμή,/
/μέχρι τη δημιουργία και στις δύο γλώσσες προγραμματισμού μιας γεννήτριας ηχητικών συμβάντων/
/με δυνατότητες ενεργοποίησης των midi ήχων του υπολογιστή και οργάνωσής τους σε ακολουθίες/
/κατά τα πρότυπα διαφορετικών μουσικών κλιμάκων./
/Επεξηγούνται οι προγραμματιστικές έννοιες των μοτίβων (patterns), επαναλαμβανόμενων διεργασιών (routines and tasks),/
/και των πληροφοριακών ροών (streams), ως προς τη λειτουργία τους για τη διαχείριση ηχητικών δεδομένων./
/Επιπλέον, περιγράφονται οι έννοιες της οκτάβας και της μουσικής κλίμακας,/
/και αναφέρεται η γέννηση και ο σημαντικός αντίκτυπος της midi τεχνολογίας στη μουσική βιομηχανία./
/Τέλος, συνδυάζονται προηγούμενες γνώσεις σχετικές με τα μοντέλα πιθανοκρατικής διαχείρισης της πληροφορίας/
/για τη δημιουργία εργαλείου για μουσικό αυτοσχεδιασμό υποβοηθούμενο από τον υπολογιστή./
/Αναφέρονται οι ηχητικές ιδιότητες της θεμελιώδους συχνότητας και των αρμονικών,/
/Άσκηση: "Up and Down the Ladder"/

/θέματα Pd: midi settings, notein, noteout, makenote, mtof, hslider, i, mod, sel, vradio, unpack/

** Κύριο Μέρος

*** Pure Data

Το πρωτόκολλο MIDI επιτρέπει στο Pure Data να επικοινωνεί με άλλα υλισμικά και λογισμικά, τόσο στην είσοδο όσο και στην έξοδο της πληροφορίας.
Για παράδειγμα, μπορούμε να εισάγουμε από έναν ελεγκτή με πλήκτρα και ολισθητήρες δεδομένα στο πρόγραμμα μας,
ή να τροφοδοτούμε με τιμές υπολογισμένες στο Pure Data έναν εξωτερικό συνθετητή.
Οι συνδεδεμένες MIDI συσκευές ορίζονται από το Μενού Εντολών > Media > ΜIDI Settings, στα πεδία συσκευών Εισόδου και Εξόδου αντίστοιχα.
Στο *Figure "Midi Settings"* έχουμε συνδέσει στην MIDI είσοδο του Pure Data το κλαβιέ M-Audio Keystation Mini 32,
ενώ η MIDI έξοδος δρομολογείται στην είσοδο του εικονικού συνθετητή Simple Synth. *Figure "MidiInOut"*

Η βασική δομή MIDI δεδομένων είναι ένα ζεύγος τιμών, όπου η πρώτη τιμή αντιστοιχεί στη νότα και η δεύτερη στην ένταση αναπαραγωγής της.
Την αντιστοιχία των MIDI τιμών με νότες ανά οκτάβα βλέπουμε στο *Figure "MidiNotes"*.
Η ένταση εκτείνεται στην κλίμακα τιμών από 0 έως 127 (μέγιστη ένταση).
Ένα ζεύγος τιμών με μη-μηδενική τιμή έντασης (note-on) ενεργοποιεί την αντίστοιχη νότα,
ενώ για την παύση της χρειάζεται να σταλεί η ίδια τιμή νότας με μηδενική τιμή έντασης (note-off).

Το αντικείμενο notein εξετάζει τις εισερχόμενες MIDI πληροφορίες και εξάγει στις εξόδους του τις τιμές νότας, έντασης, και καναλιού.
Αντίστοιχα, το αντικείμενο noteout δέχεται στις εισόδους του τις τιμές νότας, έντασης, και καναλιού, για αποστολή σε συνδεδεμένες MIDI συσκευές.
Και στα δύο αντικείμενα μπορούμε να θέσουμε ως αρχική τιμή το συγκεκριμένο MIDI κανάλι που θέλουμε να "ακούνε".
Στο *Figure "NoteInOut"* βλέπουμε εναλλακτικούς τρόπους δημιουργίας μιας νότας στο MIDI κανάλι 1,
είτε με απευθείας σύνδεση μηνυμάτων note-on και note-off στη ζεστή είσοδο του noteout (αριστερά),
είτε με μεσολάβηση του αντικειμένου unpack για περισσότερο έλεγχο (κέντρο),
είτε με σύνδεση των εξόδων του notein με τις αντίστοιχες εισόδους του noteout, για να φτάνει η πληροφορία από τα πλήκτρα του κλαβιέ μας στον εικονικό συνθετητή.

Το αντικείμενο makenote μπορεί να προγραμματίζει την αυτόματη αποστολή note-off μετά από ορισμένο χρονικό διάστημα.
Συνεπώς δέχεται τρεις τιμές στις αντίστοιχες εισόδους ή ως αρχικές τιμές: για τη νότα, την ένταση, και τη διάρκεια της. *Figure "MakeNote"*

Υπάρχουν πολλά ακόμη αντικείμενα για διαχείριση MIDI πληροφορίας, όπως ctlin και ctlout για συνεχείς τιμές ελεγκτών,
pgmin και pgmout για αλλαγή MIDI προγράμματος (που συνήθως αντιστοιχεί στον επιλεγμένο ήχο από τους διαθέσιμους του MIDI οργάνου),
bendin και bendout για pitchbend δεδομένα, κ.α.

Για να οδηγήσουμε με MIDI νότες τον ταλαντωτή μας θα συνδέσουμε στη ζεστή είσοδο του osc~ το αντικείμενο mtof,
το οποίο μετατρέπει αριθμητικές τιμές midi σε συχνότητα.
Μέ έναν οριζόντιο ολισθητή (hslider) μπορούμε να στέλνουμε τέτοιες τιμές σε συγκεκριμένο εύρος που ορίζουμε από τις ιδιότητες του αντικειμένου.
Για παράδειγμα, οι τιμές από 60 έως 72 αντιστοιχούν στις συχνότητες των νοοτών από C4 έως C5.
Αν θέλουμε να αποφύγουμε γλύστρημα (glissando) στο ακουστό αποτέλεσμα λόγω μεταβολής των δεκαδικών τιμών του ολισθητή,
παρεμβάλουμε το αντικείμενο i (integer), το οποίο κβαντίζει (κανονικοποιεί?) έναν δεκαδικό αριθμό στον κοντινότερο προς το 0 ακέραιο.
Έτσι, επιτυγχάνουμε διακριτά βήματα από νότα σε νότα. *Figure "MidiToFreq"*

Η άσκηση του Κεφαλαίου αφορά στη δημιουργία MIDI νοτών σε τονικές ακολουθίες ματζόρε και μινόρε τρόπου. *Figure "MidiScales"*
Το πρόγραμμα μας στέλνει τα αποτελέσματα του σε μια έξοδο (outlet midiNotes), ώστε να μπορεί να αξιοποιηθεί ως υπο-πρόγραμμα,
σε συνδυασμό ενδεικτικά με κάποια γεννήτρια ταλαντωτών ή κάποιο συνθετητή. *Figure "MidiScalesSub"*
Αποτελείται από 3 βασικά μέρη:
τη δημιουργία επαναλαμβανόμενων ακολουθιών 8 τιμών με αύξηση 1 ανά βήμα (υπο-πρόγραμμα "pd counter"),
τον έλεγχο αυτών των τιμών για την ενεργοποίηση των αντίστοιχων MIDI νoτών (βασικό πρόγραμμα), και
τον ορισμό των MIDI νοτών ανάλογα με τον επιθυμητό ματζόρε ή μινόρε τρόπο (υπο-πρόγραμμα "pd noteParser".

Για τη δημιουργία των 8 τιμών χρειάζεται να προσθέσουμε στον μετρητή μας το αντικείμενο mod ή αλλιώς %. *Figure "CounterPlusMod"*
Το αντικείμενο αυτό διαιρεί την τιμή της ζεστής εισόδου με την τιμή της κρύας και εξάγει το υπόλοιπο.
Έτσι, τροποποιούμε μια συνεχώς αυξανόμενη ακολουθία σε επαναλαμβανόμενη ορισμένου εύρους.

Για τον έλεγχο των τιμών χρησιμοποιούμε το αντικείμενο select ή αλλιώς sel.
Αυτό συγκρίνει τις τιμές εισόδου με τα ορίσματα του και, αν συμφωνούν, εξάγει bang από την αντίστοιχη έξοδο,
αλλιώς τις αφήνει να διαπεράσουν από την τελευταία έξοδο.
Με τον τρόπο αυτό, κάθε βήμα του μετρητή κατευθύνεται και στην αντίστοιχη MIDI νότα.

Για τον ορισμό των MIDI νοτών ανάλογα με τον επιθυμητό τρόπο, αρχικά χρησιμοποιούμε το αντικείμενο vradio,
το οποίο για κάθε διαφορετικό κελί που επιλέγουμε, εξάγει την αντίστοιχη τιμή: 0 για το πρώτο, 1 για το δεύτερο κ.ο.κ.
Το πλήθος των κελιών το ορίζουμε από τις ιδιότητες του αντικειμένου.
Συνδυάζοντας το vradio με ένα select μέσα στο υπο-προγραμμα "pd noteParser" επιλέγεται  η αντίστοιχη ακολουθία MIDI νοτών. *Figure "NoteParser"*
To αντικείμενο unpack δρομολογεί το κάθε στοιχείο της λίστας στην αντίστοιχη έξοδο,
και το αντικείμενο set με μία μεταβλητή μεταφέρει την τιμή ένα στάδιο παρακάτω χωρίς περαιτέρω πυροδότηση.


*** SuperCollider


* Κεφάλαιο 6 - Το Ηχητικό Δείγμα

** Προοίμιο
/εισαγωγή και επεξεργασία ηχητικού δείγματος./
/ιστορική εξέλιξη της δειγματοληψίας (sampling)/
/εργαλεία εισαγωγής, αναπαραγωγής, και τεμαχισμού δείγματος, και ανακατανομής τμημάτων./
/τεχνικές επεξεργασίας πλάτους σήματος (κανονικοποίηση (normalization), συμπίεση (compression) διόγκωση (expansion)./

/θέματα Pd: readsf~, openpanel, writesf~, spigot, soundfiler, tabplay~ tabread4~, tabwrite~, adc~, table/

** Κύριο Μέρος

Η αναπαραγωγή ηχητικών δειγμάτων στο Pure Data γίνεται με διάφορους τρόπους.
Για απλή αναπαραγωγή αρχείων αποθηκευμένων στον υπολογιστή ενδείκνυται το αντικείμενο readsf~.
Στέλνουμε στο readsf~ διαδοχικά: ένα μήνυμα με την εντολή open και το πλήρες όνομα του αρχείου προς ανάγνωση, και ένα μήνυμα με την εντολή start,
Μήνυμα με την εντολή stop σταματάει την αναπαραγωγή. *Figure "ReadFile"*
Σε κάθε περίπτωση, το αρχείο πρέπει να βρίσκεται στο ίδιο directory με το πρόγραμμα μας.
Για να κατευθύνουμε το readsf~ σε αρχείο από διαφορετικό directory, ενεργοποιούμε με bang την είσοδο του αντικειμένου openpanel,
ώστε να ανοίξει ένα παράθυρο αναζήτησης, να επιλέξουμε το αρχείο, και να το αναθέσουμε σε μεταβλητή της εντολής open. *Figure "OpenFile"*

Για αρχεία με περισσότερα από ένα κανάλια θέτουμε ως όρισμα του readsf~ το επιθυμητό πλήθος καναλιών.
Στο *Figure "SampleLoop"* εισάγουμε προς αναπαραγωγή ένα στερεοφωνικό αρχείο.
Το readsf~ έχει τώρα 2 εξόδους σήματος, για αριστερό και δεξί κανάλι αντίστοιχα.
Για τη δημιουργία βρόχου επανάληψης του αρχείου (loop) αξιοποιούμε την τελευταία, δεξιά έξοδο του readsf~ σε συνδυασμό με το αντικείμενο spigot.
Η τελευταία έξοδος του readsf~, αλλά και των υπόλοιπων αντικειμένων αναπαραγωγής αρχείων, εξάγει ένα bang με την ολοκλήρωση της αναπαραγωγής.
To spigot αποτελεί ουσιαστικά μια πύλη της πληροφορίας από τη ζεστή είσοδο προς την έξοδο της.
Η πύλη ανοίγει και κλείνει μέσω toggle στην κρύα είσοδο.
Με αυτόν τον τρόπο ελέγχουμε την επανατροφοδότηση του bang ολοκλήρωσης στο bang αναπαραγωγής.

Εναλλακτικός τρόπος αναπαραγωγής ηχητικών αρχείων είναι μέσω array.
Όπως έχουμε δει, το array αποτελεί πίνακα αποθήκευσης τιμών.
Αν αυτές οι τιμές αντιστοιχούν στο πλάτος ενός σήματος ανά δείγμα, μπορούμε μετά να τις διαβάσουμε για αναπαραγωγή του σήματος.
Στέλνουμε στο αντικείμενο soundfiler μήνυμα με τις εντολές read και resize, ώστε το μέγεθος του πίνακα να προσαρμοστεί αυτόματα στο πλήθος δειγμάτων του αρχείου,
και το όνομα του array που θα αποθηκεύσουμε το αρχείο μας. *Figure "Soundfiler"*
Με το αντικείμενο tabplay~ μπορούμε στέλνοντας bang να παίξουμε ολόκληρο το αρχείο, στέλνοντας δε μήνυμα με ένα σημείο έναρξης και μια διάρκεια σε δείγματα
μπορούμε να παίξουμε μεμονωμένα τμήματα. Στο παράδειγμα, το μήνυμα 44100 88200 θα ξεκινήσει την αναπαραγωγή στο 1ο δευτερόλεπτο για 2 ακόμη δευτερόλεπτα (2x44100).

Περισσότερη ευελιξία μας δίνει το αντικείμενο tabread4~.
Στο *Figure "StereoBuffer"* έχουμε εισάγει σε 2 arrays τα κανάλια ενός στερεοφωνικού αρχείου, και εξάγουμε από την αριστερή έξοδο του soundfiler το μέγεθος του αρχείου σε δείγματα.
Για την αναπαραγωγή χρειαζόμαστε ένα tabread4~ για κάθε κανάλι.
Αυτή τη φορά οδηγούμε τη σάρωση των δειγμάτων με ένα phasor~, του οποίου οι τιμές από 0 έως 1 πολλαπλασιάζονται με το πλήθος δειμάτων του αρχείου. *Figure "PlaybackSpeed"*
H χρήση του phasor~ δημιουργεί αυτόματα βρόχο επανάληψης.
Απευθείας εισαγωγή τιμών στη ζεστή είσοδο του phasor~ επηρεάζει τη συχνότητα του επιβραδύνοντας ή επιταχύνοντας ανάλογα την αναπαραγωγή του αρχείου.
Ας δούμε τώρα το μέρος του προγράμματος πάνω από το σχόλιο.
Διαιρώντας τα δείγματα που αντιστοιχούν σε 1 δευτερόλεπτο (44100) με το πλήθος δειγμάτων του σήματος παίρνουμε τη συχνότητα του phasor~ για αναπαραγωγή του αρχείου σε κανονικό χρόνο.
Παρεμβάλλοντας ένα αντικείμενο πολλαπλασιασμού μπορούμε να ελέγχουμε με ένα hslider την ταχύτητα, αλλά και τη διεύθυνση, αναπαραγωγής.

Τελευταίο θέμα του κεφαλαίου αποτελεί η καταγραφή στον υπολογιστή της εξόδου αντικειμένων επεξεργασίας σήματος με το αντικείμενο writesf~.
Αρχικά, δημιουργούμε με την εντολή open τον χώρο αποθήκευσης και το επιθυμητό όνομα για το νέο αρχείο.
Οι εντολές start και stop ενεργοποιούν και τερματίζουν αντίστοιχα τη ροή ηχητικών δεδομένων προς ηχογράφηση. *Figure "WriteFile"*
Αν θέλουμε να καταγράψουμε την είσοδο στην κάρτα ήχου του υπολογιστή, όπως το μικρόφωνο, χρησιμοποιούμε το αντικείμενο adc~.
Στο *Figure "Record"* ηχογραφούμε το adc~ σε ένα table, ουσιαστικά ένα array χωρίς τη γραφική απεικόνιση.
Το table δέχεται ως ορίσματα ένα όνομα και ένα μέγεθος. Με bang στο αντικείμενο tabwrite~ ξεκινάει η καταγραφή μέχρι να γεμίσει ο πίνακας.
Αντίστοιχα, με bang στο tabplay~ αναπαράγεται η καταγεγραμμένη πληροφορία.


* Κεφάλαιο 7 - Ντετερμινισμός και Τυχαιοκρατία στη Μουσική Εκτέλεση

** Προοίμιο
/Στο τέταρτο κεφάλαιο αναλύονται αφενός η φιλοσοφία διαφορετικών μοντέλων παραγωγής και οργάνωσης των δεδομένων/.
/και αφετέρου η πραγμάτωσή τους στα δύο προγραμματιστικά περιβάλλοντα./
/Συγκεκριμένα, τα μοντέλα αυτά περιλαμβάνουν ντετερμινιστικές, πιθα`νοκρατικές, και τυχαιοκρατικές προγραμματιστικές δομές./
/Το θεωρητικό μέρος του κεφαλαίου εστιάζει στην ιστορική εξέλιξη τέτοιων δομών,/
/καθώς και στην εφαρμογή τους για τη δημιουργία έργων ψηφιακής τέχνης,/
/ενώ το πρακτικό μέρος αναλύει τη χρήση λογικών ελεγκτών για τον συσχετισμό των επιμέρους στοιχείων/
/και τη συναρμολόγηση συστημάτων σύμφωνα με τις αρχές κάθε οργάνωσης./

** Κύριο Μέρος


* Κεφάλαιο 8 - Προσθετική και Αφαιρετική Σύνθεση

** Προοίμιο
/Στο έκτο κεφάλαιο πραγματοποιείται επίδειξη των τεχνικών της προσθετικής και αφαιρετικής σύνθεσης./
/Αναλύονται στα δύο προγραμματιστικά περιβάλλοντα οι διαδικασίες συχνοτικής επεξεργασίας/
/τόσο μέσω της πρόσθεσης ταλαντωτών, όσο και μέσω φίλτρων συχνοτικής αποσιώπησης και ενίσχυσης./
/Τέλος, ο αναγνώστης καθοδηγείται προς την υλοποίηση γεννήτριας προσθετικής επεξεργασίας πολλαπλών ταλαντωτών,/
/και παραγωγής θορύβου με δυνατότητα συχνοτικής επεξεργασίας μέσω εργαλείου παραμετροποιημένης ισοστάθμισης./


** Κύριο Μέρος


* Κεφάλαιο 9 - Τεχνικές Διαμόρφωσης Σήματος

** Προοίμιο
/Στο δέκατο κεφάλαιο παρουσιάζονται ευρέως διαδεδομένες τεχνικές διαμόρφωσης του ηχητικού σήματος,/
/συγκεκριμένα η Διαμόρφωση Πλάτους (Amplitude Modulation - AM), η Διαμόρφωση Δακτυλίου (Ring Modulation),/
/η Διαμόρφωση Συχνότητας (Frequency Modulation - FM), και οι Περιβάλλουσες (Envelopes)./
/Έπειτα από μια ιστορική αναδρομή στην εξέλιξή τους, αναλύονται οι βασικές αρχές λειτουργίας τους/
/και περιγράφεται η ανάπτυξη των αντίστοιχων επεξεργαστικών εργαλείων./


** Κύριο Μέρος


* Κεφάλαιο 10 - Προηγμένες Τεχνικές Σύνθεσης I

** Προοίμιο
/Στο δωδέκατο κεφάλαιο αναλύονται προηγμένες τεχνικές ηχητικής σύνθεσης και/
/υλοποιούνται τα αντίστοιχα εργαλεία στα δύο προγραμματιστικά περιβάλλοντα./
/Συγκεκριμένα, το ενδιαφέρον εστιάζεται στην Κοκκώδη Σύνθεση (Granular Synthesis),/
/στη Σύνθεση Μέσω Πινάκων (Wavetable Synthesis),/
/και στον Διακριτό Μετασχηματισμό Fourier (Fast Fourier Transform)./


** Κύριο Μέρος


* Κεφάλαιο 11 - Προηγμένες Τεχνικές Σύνθεσης II

** Προοίμιο
/Στο δωδέκατο κεφάλαιο αναλύονται προηγμένες τεχνικές ηχητικής σύνθεσης και/
/υλοποιούνται τα αντίστοιχα εργαλεία στα δύο προγραμματιστικά περιβάλλοντα./
/Συγκεκριμένα, το ενδιαφέρον εστιάζεται στην Κοκκώδη Σύνθεση (Granular Synthesis),/
/στη Σύνθεση Μέσω Πινάκων (Wavetable Synthesis),/
/και στον Διακριτό Μετασχηματισμό Fourier (Fast Fourier Transform)./


** Κύριο Μέρος



* Κεφάλαιο 12 - Τεχνικές Ανάδρασης

** Προοίμιο
/Στο ενδέκατο κεφάλαιο αναλύονται τεχνικές επεξεργασίας ηχητικού σήματος βασισμένες/
/στην ανάδραση που δημιουργεί η μεταβαλλόμενη χρονική του καθυστέρηση και ανατροφοδότηση./
/Συγκεκριμένα, επεξηγούνται και υλοποιούνται στα δύο προγραμματιστικά περιβάλλοντα/
/οι τεχνικές επεξεργασίας delay, echo, flanger, και reverb./


** Κύριο Μέρος


* Κεφάλαιο 13 - Διεπαφές

** Προοίμιο

Στο δέκατο τρίτο κεφάλαιο εξετάζονται θέματα σχεδιασμού του περιβάλλοντος διεπαφής
ως προς τη χρηστικότητα και φιλικότητά του προς τον τελικό χρήστη.
Εξετάζονται οι δυνατότητες κάθε γλώσσας για τη σε-πραγματικό-χρόνο εισαγωγή δεδομένων,
τη συνδεσιμότητα με εξωτερικούς ελεγκτές μέσω πρωτοκόλλου OSC, την οπτική οργάνωση
μέσω της χρήσης υποστηρικτικών γραφικών, και την ενσωμάτωση των υλοποιημένων εργαλείων
ως αυτόνομες εφαρμογές σε άλλες πλατφόρμες (VSTplugins). GUI
OSC, abstractions, plugins
Άσκηση: ενσωμάτωση σε όργανο

** Κύριο Μέρος


* Κεφάλαιο 14 - Διασυνδεσιμότητα

** Προοίμιο

Στο δέκατο τρίτο κεφάλαιο εξετάζονται θέματα σχεδιασμού του περιβάλλοντος διεπαφής
ως προς τη χρηστικότητα και φιλικότητά του προς τον τελικό χρήστη.
Εξετάζονται οι δυνατότητες κάθε γλώσσας για τη σε-πραγματικό-χρόνο εισαγωγή δεδομένων,
τη συνδεσιμότητα με εξωτερικούς ελεγκτές μέσω πρωτοκόλλου OSC, την οπτική οργάνωση
μέσω της χρήσης υποστηρικτικών γραφικών, και την ενσωμάτωση των υλοποιημένων εργαλείων
ως αυτόνομες εφαρμογές σε άλλες πλατφόρμες (VSTplugins).

** Κύριο Μέρος


* Κεφάλαιο 15 - Αυτοσχεδιασμός και Αυτόματα

** Προοίμιο

Στο δέκατο τέταρτο κεφάλαιο εξετάζονται θέματα υποβοήθησης της μουσικής εκτέλεσης
μέσω του ηλεκτρονικού υπολογιστή.
Αναφέρονται τεχνικές καταγραφής, ανάλυσης και μίμηση της εκτέλεσης,
καθώς και αυτοματοποιημενης αλγοριθμικής οργάνωσης.
generative music, AI

** Κύριο Μέρος
